import time
from pymavlink import mavutil

try:
    from siyi_sdk import SIYISDK
except ImportError:
    print("Errore: impossibile importare siyi_sdk.")
    exit(1)

class GimbalController:
    def __init__(self, connection="/dev/ttyAMA0", baud=57600, cam_ip="192.168.144.25", cam_port=37260):
        self.master = mavutil.mavlink_connection(connection, baud=baud)
        
        # Attendi il primo heartbeat
        self.master.wait_heartbeat()
        print("âœ… Heartbeat ricevuto.")

        # Richiedi RC_CHANNELS a 10Hz (piÃ¹ reattivo)
        self.master.mav.request_data_stream_send(
            self.master.target_system,
            self.master.target_component,
            mavutil.mavlink.MAV_DATA_STREAM_RC_CHANNELS,
            10,  # Frequenza aumentata
            1    # start
        )

        # Connessione alla telecamera
        self.cam = SIYISDK(server_ip=cam_ip, port=cam_port)
        if not self.cam.connect():
            print("Errore: impossibile connettersi alla telecamera")
            exit(1)

        self.prev_yaw = None
        self.prev_pitch = None

    def map_rc(self, rc_value, rc_min, rc_max, out_min, out_max):
        rc_value = max(rc_min, min(rc_max, rc_value))
        return ((rc_value - rc_min) / (rc_max - rc_min)) * (out_max - out_min) + out_min

    def run(self):
        print("ðŸŽ® Controllo YAW & PITCH da RC (CH12 = YAW, CH13 = PITCH)...")
        while True:
            msg = self.master.recv_match(type='RC_CHANNELS', blocking=True, timeout=1)
            if msg:
                rc_yaw = msg.chan12_raw
                rc_pitch = msg.chan13_raw

                if not (900 < rc_yaw < 2100 and 900 < rc_pitch < 2100):
                    continue

                yaw = self.map_rc(rc_yaw, 1000, 2000, -120, 120)
                pitch = self.map_rc(rc_pitch, 1000, 2000, -90, 25)

                # Invia solo se cambia di almeno 0.3Â° (piÃ¹ sensibile)
                if (self.prev_yaw is None or abs(yaw - self.prev_yaw) > 0.3 or
                    self.prev_pitch is None or abs(pitch - self.prev_pitch) > 0.3):

                    self.cam.setGimbalRotation(yaw, pitch)
                    print(f"YAW: {yaw:.1f}Â° | PITCH: {pitch:.1f}Â°")
                    self.prev_yaw = yaw
                    self.prev_pitch = pitch

            time.sleep(0.005)  # ReattivitÃ  molto alta

if __name__ == "__main__":
    controller = GimbalController()
    controller.run()
